#pragma once

#include "Interface_Code.h"
#include "CCommon_Error.h"

#include "CObj__STEP_FNC__ALID.h"
#include "CObj__STEP_FNC__DEF.h"


class CDS__LEARNED_ITEM_INFO
{
public:
	int iSTEP_ID;

	// ...
	CString sDATA__APC;

	CString sDATA__RF_PLASMA__FREQUENCY;
	CString sDATA__RF_BIAS__FREQUENCY;

	CString sDATA__MAT_PLASMA__LOAD_POS;
	CString sDATA__MAT_PLASMA__TUNE_POS;

	CString sDATA__MAT_BIAS__LOAD_POS;
	CString sDATA__MAT_BIAS__TUNE_POS;

	// ...
	void Copy_From(const CDS__LEARNED_ITEM_INFO& src_item)
	{
		iSTEP_ID = src_item.iSTEP_ID;
		
		sDATA__APC = src_item.sDATA__APC;

		sDATA__RF_PLASMA__FREQUENCY = src_item.sDATA__RF_PLASMA__FREQUENCY;
		sDATA__RF_BIAS__FREQUENCY   = src_item.sDATA__RF_BIAS__FREQUENCY;

		sDATA__MAT_PLASMA__LOAD_POS = src_item.sDATA__MAT_PLASMA__LOAD_POS;
		sDATA__MAT_PLASMA__TUNE_POS = src_item.sDATA__MAT_PLASMA__TUNE_POS;

		sDATA__MAT_BIAS__LOAD_POS = src_item.sDATA__MAT_BIAS__LOAD_POS;
		sDATA__MAT_BIAS__TUNE_POS = src_item.sDATA__MAT_BIAS__TUNE_POS;
	}
};
class CDS__LEARNED_ITEM_CTRL
{
public:
	CPtrArray pList__ITEM;

	// ...
	~CDS__LEARNED_ITEM_CTRL()
	{
		Init__ALL_ITEM();
	}

	void Init__ALL_ITEM()
	{
		CDS__LEARNED_ITEM_INFO *p_info;

		int limit = pList__ITEM.GetSize();
		int i;

		for(i=0;i<limit;i++)
		{
			p_info = (CDS__LEARNED_ITEM_INFO*) pList__ITEM[i];
			delete p_info;
		}

		pList__ITEM.RemoveAll();
	}
	void Load__ITEM(const CDS__LEARNED_ITEM_INFO& src_item)
	{
		CDS__LEARNED_ITEM_INFO *p_item = NULL;
		int check_flag = -1;

		int limit = pList__ITEM.GetSize();
		int i;

		for(i=0; i<limit; i++)
		{
			p_item = (CDS__LEARNED_ITEM_INFO*) pList__ITEM[i];
			
			if(p_item->iSTEP_ID != src_item.iSTEP_ID)
			{
				continue;
			}

			check_flag = 1;
			break;
		}

		if(check_flag < 0)
		{
			p_item = new CDS__LEARNED_ITEM_INFO;
			pList__ITEM.Add(p_item);
		}

		p_item->Copy_From(src_item);
	}
	int Get__DB_ITEM(const int db_index,CDS__LEARNED_ITEM_INFO* p_item)
	{
		CDS__LEARNED_ITEM_INFO *p_db;
		
		if(db_index < 0)							return -1;
		if(db_index >= pList__ITEM.GetSize())		return -1;

		p_db = (CDS__LEARNED_ITEM_INFO*) pList__ITEM[db_index];
		p_item->Copy_From(*p_db);

		return 1;
	}
};


class CObj__STEP_FNC : public __IOBJ__STD_TYPE
{
private:
	//-------------------------------------------------------------------------
	CString sObject_Name;

	// ...
	CCommon_Error__USER_FNC mERROR__USER_FNC;

	SCX__USER_LOG_CTRL xLOG_CTRL;

	// ...
	int iActive__SIM_MODE;

	CDS__LEARNED_ITEM_CTRL mDB__LEARNED_ITEM_CTRL;
	//


	//-------------------------------------------------------------------------
	//  INTERNAL PROPERTY

	// ...
	int iOBJ_BUSY_FLAG;

	// ...
	CX__VAR_STRING_CTRL  sCH__OBJ_MSG;
	CX__VAR_STRING_CTRL  sCH__OBJ_SUB_MSG;

	// Config Channel ...
	CX__VAR_ANALOG_CTRL  aCH__CFG_STEP_TIME_OFFSET_SEC;

	CX__VAR_ANALOG_CTRL  aCH__CFG_ESC_MAX_TEMP_DIFFERENCE;
	
	// ...
	CX__VAR_STRING_CTRL  sCH__CUR_PROC_TYPE;
	CX__VAR_STRING_CTRL  sCH__XFER_BALLAST_CTRL_FLAG;

	CX__VAR_STRING_CTRL  sCH__RCP_FILE_PATH;
	CX__VAR_DIGITAL_CTRL dCH__RCP_DATA_APP_LOG;
	CX__VAR_ANALOG_CTRL  aCH__RCP_MON_STEP_NO;
	CX__VAR_ANALOG_CTRL  aCH__RCP_FDC_STEP_TIME;

    CX__VAR_STRING_CTRL  sCH__STEP_TIME_COUNT;
	SCX__TIMER_CTRL		 xI_TIMER;

	//
	CX__VAR_STRING_CTRL  sCH__EXCEPTION_COMMAND;
	CX__VAR_STRING_CTRL  sCH__STEP_STABLE_REQ;

	CX__VAR_STRING_CTRL  sCH__EXCEPTION_CONTINUE_REQ;
	CX__VAR_STRING_CTRL  sCH__EXCEPTION_CONTINUE_STEP_OVER_TIME;

	//
	CX__VAR_STRING_CTRL  sCH__STEP_EDP_CHECK_SEC;
	CX__VAR_STRING_CTRL  sCH__STEP_OVERETCH_SEC;
	CX__VAR_STRING_CTRL  sCH__STEP_OVERETCH_PERCENT;

	CX__VAR_STRING_CTRL  sCH__STEP_TIME_ABORT_FLAG;

	// ...
	CX__VAR_STRING_CTRL  sCH__HEADER_TEMP_CHECK_FLAG;
	CX__VAR_STRING_CTRL  sCH__HEADER_TEMP_CHECK_RECIPE;

	// ...
	CX__VAR_STRING_CTRL  sCH__FDC_PIN_STATUS;

	// WAFER COUNT - INFO .....
	CX__VAR_STRING_CTRL  sCH__TOTAL_COUNT_START_DATE;
	CX__VAR_ANALOG_CTRL  aCH__WAFER_TOTAL_COUNT;

	CX__VAR_STRING_CTRL  sCH__CURRENT_COUNT_START_DATE;
	CX__VAR_ANALOG_CTRL  aCH__WAFER_CURRENT_COUNT;
	CX__VAR_DIGITAL_CTRL dCH__WAFER_CURRENT_COUNT_RESET;
	CX__VAR_DIGITAL_CTRL dCH__WAFER_TOTAL_COUNT_RESET;

	// RFx REF : RF ON - INFO .....
	CX__VAR_STRING_CTRL  sCH__RF_PART__ON_TIME_START_DATE_X[CFG__RF_PART_SIZE];
	CX__VAR_ANALOG_CTRL  aCH__RF_PART__ON_TIME_TOTAL_HOUR_X[CFG__RF_PART_SIZE];
	CX__VAR_ANALOG_CTRL  aCH__RF_PART__ON_TIME_TOTAL_MIN_X[CFG__RF_PART_SIZE];
	CX__VAR_ANALOG_CTRL  aCH__RF_PART__ON_TIME_TOTAL_SEC_X[CFG__RF_PART_SIZE];
	CX__VAR_DIGITAL_CTRL dCH__RF_PART__ON_TIME_RESET_X[CFG__RF_PART_SIZE];

	// ESC ON - INFO .....
	CX__VAR_STRING_CTRL  sCH__ESC_ON_TIME_START_DATE;
	CX__VAR_ANALOG_CTRL  aCH__ESC_ON_TIME_TOTAL_HOUR;
	CX__VAR_ANALOG_CTRL  aCH__ESC_ON_TIME_TOTAL_MIN;
	CX__VAR_ANALOG_CTRL  aCH__ESC_ON_TIME_TOTAL_SEC;
	CX__VAR_DIGITAL_CTRL dCH__ESC_ON_TIME_RESET;

	// ...
	CX__VAR_STRING_CTRL  sCH__ACTIVE__RF_TURN_OFF_DELAY;
	
	CX__VAR_ANALOG_CTRL  aCH__CFG_STEP_DELAY_RF_OFF;

	// ...
	CX__VAR_STRING_CTRL  sCH__ACTIVE__MFC_CLOSE_DELAY;

	CX__VAR_ANALOG_CTRL  aCH__CFG_STEP_DELAY_MFC_CLOSE;
	//


	//---------------------------------------------------------------------
	CX__VAR_STRING_CTRL  sCH__CUR_LOTID;
	CX__VAR_STRING_CTRL  sCH__PRE_LOTID;
	CX__VAR_STRING_CTRL  sCH__LEARNED_APPLY_STATUS;

	// LEARNED DATA ...    
	CX__VAR_DIGITAL_CTRL dCH__CFG_LEARNED_APPLY_MODE;
	CX__VAR_STRING_CTRL  sCH__LEARNED_RESULT;
		
	
	//---------------------------------------------------------------------
	// RANGE PARAETER ...
	CX__VAR_ANALOG_CTRL  aCH__CFG_RANGE_ZERO;
	CX__VAR_DIGITAL_CTRL dCH__CFG_IO_INTERLOCK_SKIP;

	
	// HEADER : RCP PARAMETER ...
	CX__VAR_DIGITAL_CTRL dCH__CFG_HEADER_APPLY_MODE;
	CX__VAR_STRING_CTRL  sCH__TEMPERATURE_CTRL_MODE;
	CX__VAR_ANALOG_CTRL  aCH__CFG_TEMP_CTRL_STABLE_RANGE;
	CX__VAR_DIGITAL_CTRL dCH__CFG_TEMP_CTRL_WAIT_MODE;


	// TOLERANCE : RCP PARAMETER ...
	CX__VAR_DIGITAL_CTRL dCH__CFG_TOLERANCE_CHECK_CHM_PRESSURE;
	CX__VAR_ANALOG_CTRL	 aCH__TOLERANCE_W_CHM_PRESSURE;
	CX__VAR_ANALOG_CTRL  aCH__TOLERANCE_F_CHM_PRESSURE;
	CX__VAR_ANALOG_CTRL  aCH__TOLERANCE_TC_CHM_PRESSURE;
	CX__VAR_ANALOG_CTRL  aCH__TOLERANCE_TS_CHM_PRESSURE;
	
	CX__VAR_DIGITAL_CTRL dCH__CFG_TOLERANCE_CHECK_MFC_GASx_FLOW[CFG_SIZE__MFC_OBJ];
	CX__VAR_ANALOG_CTRL  aCH__TOLERANCE_W_MFC_GASx_FLOW[CFG_SIZE__MFC_OBJ];
	CX__VAR_ANALOG_CTRL	 aCH__TOLERANCE_F_MFC_GASx_FLOW[CFG_SIZE__MFC_OBJ];
	CX__VAR_ANALOG_CTRL  aCH__TOLERANCE_TC_MFC_GASx_FLOW[CFG_SIZE__MFC_OBJ];
	CX__VAR_ANALOG_CTRL  aCH__TOLERANCE_TS_MFC_GASx_FLOW[CFG_SIZE__MFC_OBJ];
	CX__VAR_STRING_CTRL  sCH__TOLERANCE_W_MFC_GASx_TITLE[CFG_SIZE__MFC_OBJ];
	CX__VAR_STRING_CTRL  sCH__TOLERANCE_F_MFC_GASx_TITLE[CFG_SIZE__MFC_OBJ];
	CX__VAR_STRING_CTRL  sCH__TOLERANCE_TC_MFC_GASx_TITLE[CFG_SIZE__MFC_OBJ];
	CX__VAR_STRING_CTRL  sCH__TOLERANCE_TS_MFC_GASx_TITLE[CFG_SIZE__MFC_OBJ];

	
	// STEP : RCP PARAMETER ...
	CX__VAR_STRING_CTRL  sCH__RCP_STEP_MESSAGE;							// RCP.STEP.MESSAGE
	CX__VAR_DIGITAL_CTRL dCH__RCP_STEP_MODE;							// RCP.STEP.MODE
	CX__VAR_ANALOG_CTRL	 aCH__RCP_STEP_TIME;							// RCP.STEP.TIME

	CX__VAR_DIGITAL_CTRL dCH__RCP_APC_MODE;								// RCP.APC.MODE
	CX__VAR_ANALOG_CTRL  aCH__RCP_APC_PRESSURE;							// RCP.APC.PRESSURE
	CX__VAR_ANALOG_CTRL  aCH__RCP_APC_POSITION;							// RCP.APC.POSITION
	CX__VAR_ANALOG_CTRL  aCH__RCP_APC_LEARNED_POS;						// RCP.APC.LEARNED.POS
	CX__VAR_ANALOG_CTRL  aCH__RCP_APC_PRESET_POS;						// RCP.APC.PRESET.POS
	CX__VAR_ANALOG_CTRL  aCH__RCP_APC_HOLD_DELAY;						// RCP.APC.HOLD.DELAY

	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_PLASMA_POWER;						// RCP.RF.PLASMA.POWER
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_PLASMA_PULSE_FREQ;					// RCP.RF.PLASMA.PULSE.FREQ
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_PLASMA_FREQ_LEARNED;				// RCP.RF.PLASMA.FREQ.LEARNED
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_PLASMA_FREQ_PRESET;                // RCP.RF.PLASMA.FREQ.PRESET
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_PLASMA_TUNE_DELAY;                 // RCP.RF.PLASMA.TUNE.DELAY
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_PLASMA_DUTY;						// RCP.RF.PLASMA.DUTY

	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_BIAS_POWER;						// RCP.RF.BIAS.POWER
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_BIAS_PULSE_FREQ;					// RCP.RF.BIAS.PULSE.FREQ
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_BIAS_FREQ_LEARNED;				    // RCP.RF.BIAS.FREQ.LEARNED
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_BIAS_FREQ_PRESET;                  // RCP.RF.BIAS.FREQ.PRESET
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_BIAS_TUNE_DELAY;                   // RCP.RF.BIAS.TUNE.DELAY
	CX__VAR_ANALOG_CTRL  aCH__RCP_RF_BIAS_DUTY;							// RCP.RF.BAIS.DUTY

	//
	CX__VAR_DIGITAL_CTRL dCH__RCP_PLASMA_CTRL_MODE;						// RCP.PLASMA.CTRL.MODE
	CX__VAR_ANALOG_CTRL  aCH__RCP_PLASMA_MATCHER_C1_OUTPUT;				// RCP.PLASMA.MATCHER.C1
	CX__VAR_ANALOG_CTRL  aCH__RCP_PLASMA_MATCHER_C1_PRESET;				// RCP.PLASMA.MATCHER.C1.PRESET
	CX__VAR_ANALOG_CTRL  aCH__RCP_PLASMA_MATCHER_C1_LEARNED;			// RCP.PLASMA.MATCHER.C1.LEARNED
	CX__VAR_ANALOG_CTRL  aCH__RCP_PLASMA_MATCHER_C2_OUTPUT;				// RCP.PLASMA.MATCHER.C2
	CX__VAR_ANALOG_CTRL  aCH__RCP_PLASMA_MATCHER_C2_PRESET;				// RCP.PLASMA.MATCHER.C2.PRESET
	CX__VAR_ANALOG_CTRL  aCH__RCP_PLASMA_MATCHER_C2_LEARNED;			// RCP.PLASMA.MATCHER.C2.LEARNED
	CX__VAR_ANALOG_CTRL  aCH__RCP_PLASMA_MATCHER_AUTO_DELAY_TIME;		// RCP.PLASMA.MATCHER.AUTO.DELAY.TIME

	CX__VAR_DIGITAL_CTRL dCH__RCP_BIAS_CTRL_MODE;						// RCP.BIAS.CTRL.MODE
	CX__VAR_ANALOG_CTRL  aCH__RCP_BIAS_MATCHER_C1_OUTPUT;				// RCP.BIAS.MATCHER.C1
	CX__VAR_ANALOG_CTRL  aCH__RCP_BIAS_MATCHER_C1_PRESET;				// RCP.BIAS.MATCHER.C1.PRESET
	CX__VAR_ANALOG_CTRL  aCH__RCP_BIAS_MATCHER_C1_LEARNED;				// RCP.BIAS.MATCHER.C1.LEARNED
	CX__VAR_ANALOG_CTRL  aCH__RCP_BIAS_MATCHER_C2_OUTPUT;				// RCP.BIAS.MATCHER.C2
	CX__VAR_ANALOG_CTRL  aCH__RCP_BIAS_MATCHER_C2_PRESET;				// RCP.BIAS.MATCHER.C2.PRESET
	CX__VAR_ANALOG_CTRL  aCH__RCP_BIAS_MATCHER_C2_LEARNED;				// RCP.BIAS.MATCHER.C2.LEARNED
	CX__VAR_ANALOG_CTRL  aCH__RCP_BIAS_MATCHER_AUTO_DELAY_TIME;			// RCP.BIAS.MATCHER.AUTO.DELAY.TIME

	//
	CX__VAR_ANALOG_CTRL  aCH__RCP_TOP_FRC_CENTER;						// RCP.TOP.FRC.CENTER

	CX__VAR_ANALOG_CTRL  aCH__RCP_GAS_XX_FLOW[CFG_SIZE__MFC_OBJ];		// RCP.GAS.XX.HE.FLOW

	CX__VAR_DIGITAL_CTRL dCH__RCP_ESC_CTRL_MODE;						// RCP.ESC.CTRL.MODE
	CX__VAR_ANALOG_CTRL  aCH__RCP_DPC_CENTER;							// RCP.DPC.CENTER
	CX__VAR_ANALOG_CTRL  aCH__RCP_DPC_EDGE;								// RCP.DPC.EDGE

	CX__VAR_ANALOG_CTRL  aCH__RCP_DPC_CENTER_FLOW_MAX_THRESHOLD;		// RCP.DPC.CENTER.ZONE.FLOW.MAX.THRESHOLD
	CX__VAR_ANALOG_CTRL  aCH__RCP_DPC_CENTER_FLOW_MIN_THRESHOLD;		// RCP.DPC.CENTER.ZONE.FLOW.MIN.THRESHOLD
	CX__VAR_ANALOG_CTRL  aCH__RCP_DPC_EDGE_FLOW_MAX_THRESHOLD;			// RCP.DPC.EDGE.ZONE.FLOW.MAX.THRESHOLD
	CX__VAR_ANALOG_CTRL  aCH__RCP_DPC_EDGE_FLOW_MIN_THRESHOLD;			// RCP.DPC.EDGE.ZONE.FLOW.MIN.THRESHOLD

	CX__VAR_ANALOG_CTRL  aCH__RCP_ESC_CENTER_TEMP;						// RCP.ESC.CENTER.TEMP
	CX__VAR_ANALOG_CTRL  aCH__RCP_ESC_CENTER_OP_OFFSET;					// RCP.ESC.CENTER.OP_OFFSET
	CX__VAR_ANALOG_CTRL  aCH__RCP_ESC_EDGE_TEMP;						// RCP.ESC.EDGE.TEMP
	CX__VAR_ANALOG_CTRL  aCH__RCP_ESC_EDGE_OP_OFFSET;					// RCP.ESC.EDGE.OP_OFFSET
	
	CX__VAR_DIGITAL_CTRL dCH__RCP_LIFT_PIN_MODE;						// RCP.LIFT_PIN.MODE

	CX__VAR_ANALOG_CTRL  aCH__RCP_LOOP_START;							// RCP.LOOP_START
	CX__VAR_ANALOG_CTRL  aCH__RCP_LOOP_REPEAT;							// RCP.LOOP_REPEAT

	// RCP CTRL REQ ...
	CX__VAR_STRING_CTRL  sCH__RCP_MATCHER_TOP__CTRL_REQ;

	// STEP : HEATER CONFIG ...
	CX__VAR_DIGITAL_CTRL dCH__CFG_STEP_ESC_HEATER_STABLE_CHECK;
	CX__VAR_DIGITAL_CTRL dCH__CFG_STEP_ESC_HEATER_FAULT_CHECK;

	// RECIPE PRE-CHANNEL ...
	CX__VAR_STRING_CTRL  sCH__PRE_RCP_APC_CTRL;	

	CX__VAR_STRING_CTRL  sCH__PRE_RCP_RF_BIAS__POWER;					// W,  0.0 ~ 5000.0

	CX__VAR_STRING_CTRL  sCH__PRE_RCP_MAT_BIAS_CONTROL_MODE;
	CX__VAR_STRING_CTRL  sCH__PRE_RCP_MAT_BIAS_LOAD_POSITION;
	CX__VAR_STRING_CTRL  sCH__PRE_RCP_MAT_BIAS_TUNE_POSITION;
	CX__VAR_STRING_CTRL  sCH__PRE_RCP_MAT_BIAS_AUTO_DELAY_TIME;

	CX__VAR_STRING_CTRL  sCH__PRE_RCP_MFC_SET_FLOW[CFG_SIZE__MFC_OBJ];
	//


	//-------------------------------------------------------------------------
	//  EXTERNAL PROPERTY

	// DB SYS ...
	CX__VAR_DIGITAL_CTRL dEXT_CH__CFG_SCH_TEST_SIM_ALARM_STEP_ACTIVE;

	//
	CX__VAR_STRING_CTRL  sEXT_CH__SYSTEM_INTERLOCK_FLAG;

	CX__VAR_DIGITAL_CTRL dCH__CFG_INTERLOCK_MFC_TYPE[CFG_SIZE__MFC_OBJ][CFG_INTERLOCK__MFC_SIZE];
	CX__VAR_STRING_CTRL  sEXT_CH__STEP_ID;

	//
	int Get__MFC_Interlock_Index(const int cur_index,CUIntArray& l_lock_index);
	int Get__GAS_Index(const CString& gas_type);

	// DB INF ...
	CX__VAR_DIGITAL_CTRL dEXT_CH__SLOT01_STATUS;
	CX__VAR_STRING_CTRL  sEXT_CH__CUR_LOTID;
	CX__VAR_STRING_CTRL  sEXT_CH__RF_ON_FLAG;

	CX__VAR_STRING_CTRL  xEXT_CH__PMC_PROC_READY_FLAG;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CHM_PRESSURE_TORR;

	CX__VAR_DIGITAL_CTRL dEXT_CH__CFG_DECHUCK_CTRL_MODE;

	
	//----------------------------------------------------------------------------
	// OBJ : VAC_VALVE ...
	bool bActive__OBJ_CTRL__VAC_VLV;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__VAC_VLV;


	//----------------------------------------------------------------------------
	// OBJ : APC ...
	bool bActive__OBJ_CTRL__APC;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__APC;

	//
	CX__VAR_DIGITAL_CTRL dEXT_CH__APC_OBJ__CTRL;
	CX__VAR_ANALOG_CTRL	 aEXT_CH__APC_OBJ__PARA_PRESSURE;
	CX__VAR_ANALOG_CTRL	 aEXT_CH__APC_OBJ__PARA_POSITION;
	CX__VAR_ANALOG_CTRL	 aEXT_CH__APC_OBJ__PARA_PRE_POS_VALUE;
	CX__VAR_ANALOG_CTRL	 aEXT_CH__APC_OBJ__PARA_PRE_POS_SEC;

	CX__VAR_DIGITAL_CTRL dEXT_CH__APC_OBJ__ABORT_FLAG;
	CX__VAR_DIGITAL_CTRL dEXT_CH__APC_OBJ__STABLE_FLAG;


	//----------------------------------------------------------------------------
	// OBJ : FRC1 ...
	bool bActive__OBJ_CTRL__FRC1;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__FRC1;

	//
	CX__VAR_DIGITAL_CTRL dEXT_CH__FRC1__OBJ_CTRL;

	CX__VAR_ANALOG_CTRL  aEXT_CH__FRC1__CENTER_FLOW;

	CX__VAR_STRING_CTRL  sEXT_CH__FRC1__MON_STABLE_FLAG;
	CX__VAR_STRING_CTRL  sEXT_CH__FRC1__MON_FAULT_FLAG;

	
	//----------------------------------------------------------------------------
	// OBJ : HEATER ...
	
	// ESC HEATER ...
	bool bActive__OBJ_CTRL__ESC_HTR;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__ESC_HTR;

	//
	CX__VAR_ANALOG_CTRL  aEXT_CH__ESC_HTR__MON_IO_SET_CENTER_FEEDFORWARD_OP;
	CX__VAR_ANALOG_CTRL  aEXT_CH__ESC_HTR__MON_IO_SET_EDGE_FEEDFORWARD_OP;

	CX__VAR_STRING_CTRL  sEXT_CH__ESC_HTR__MON_HEATING_FLAG;
	CX__VAR_STRING_CTRL  sEXT_CH__ESC_HTR__MON_STABLE_FLAG;
	CX__VAR_STRING_CTRL  sEXT_CH__ESC_HTR__MON_FAULT_FLAG;

	
	//----------------------------------------------------------------------------
	// OBJ : MFC ...
	int iOBJ_MFC__SIZE;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__MFC[CFG_SIZE__MFC_OBJ];

	CX__VAR_DIGITAL_CTRL dEXT_CH__MFC__OBJ_CTRL[CFG_SIZE__MFC_OBJ];
	CX__VAR_DIGITAL_CTRL dEXT_CH__MFC__CFG_USE_FLAG[CFG_SIZE__MFC_OBJ];

	CX__VAR_ANALOG_CTRL	 aEXT_CH__MFC__SET_FLOW[CFG_SIZE__MFC_OBJ];
	CX__VAR_ANALOG_CTRL  aEXT_CH__MFC__GET_FLOW[CFG_SIZE__MFC_OBJ];

	CX__VAR_STRING_CTRL  sEXT_CH__MFC__CFG_GASx_NAME[CFG_SIZE__MFC_OBJ];
	CX__VAR_DIGITAL_CTRL dEXT_CH__MFC__ABORT_FLAG[CFG_SIZE__MFC_OBJ];
	CX__VAR_DIGITAL_CTRL dEXT_CH__MFC__STABLE_FLAG[CFG_SIZE__MFC_OBJ];


	//----------------------------------------------------------------------------
	// OBJ : RFx GENERATOR ...

	// RF_BIAS
	bool bActive__OBJ_CTRL__RF_BIAS;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__RF_BIAS;

	CX__VAR_DIGITAL_CTRL dEXT_CH__RF_BIAS__OBJ_CTRL;

	CX__VAR_ANALOG_CTRL  aEXT_CH__RF_BIAS__PARA_SET_POWER;
	CX__VAR_STRING_CTRL  sEXT_CH__RF_BIAS__MON_IO_POWER_SET;

	CX__VAR_DIGITAL_CTRL dEXT_CH__RF_BIAS__STABLE_FLAG;
	CX__VAR_DIGITAL_CTRL dEXT_CH__RF_BIAS__ABORT_FLAG;

	// RF_PLASMA
	bool bActive__OBJ_CTRL__RF_PLASMA;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__RF_PLASMA;

	CX__VAR_DIGITAL_CTRL dEXT_CH__RF_PLASMA__OBJ_CTRL;

	CX__VAR_ANALOG_CTRL  aEXT_CH__RF_PLASMA__PARA_SET_POWER;
	CX__VAR_STRING_CTRL  sEXT_CH__RF_PLASMA__MON_IO_POWER_SET;
	
	CX__VAR_DIGITAL_CTRL dEXT_CH__RF_PLASMA__STABLE_FLAG;
	CX__VAR_DIGITAL_CTRL dEXT_CH__RF_PLASMA__ABORT_FLAG;
	//


	//----------------------------------------------------------------------------
	// RFx MATCHER ...
	
	// MATCHER TOP : PLASMA
	bool bActive__OBJ_CTRL__MAT_TOP;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__MAT_TOP;

	CX__VAR_DIGITAL_CTRL dEXT_CH__MAT_TOP__OBJ_CTRL;

	CX__VAR_DIGITAL_CTRL dEXT_CH__MAT_TOP__PLASMA_MODE_SET;
	CX__VAR_ANALOG_CTRL  aEXT_CH__MAT_TOP__PLASMA_LOAD_POS;
	CX__VAR_ANALOG_CTRL  aEXT_CH__MAT_TOP__PLASMA_TUNE_POS;

	//----------------------------------------------------------------------------
	// OBJ : LIFT_PIN ...
	bool bActive__OBJ_CTRL__LIFT_PIN;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__LIFT_PIN;

	CX__VAR_DIGITAL_CTRL dEXT_CH__LIFT_PIN__OBJ_CTRL;
	
	//----------------------------------------------------------------------------
	// OBJ : ESC ...
	bool bActive__OBJ_CTRL__ESC_SYS;
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__ESC;

	CX__VAR_STRING_CTRL  sEXT_CH__ESC__MON_STABLE_FLAG;
	CX__VAR_STRING_CTRL  sEXT_CH__ESC__MON_FAULT_FLAG;

	CX__VAR_STRING_CTRL  sEXT_CH__ESC__RCP_He_CENTER_PRESSURE_SETPOINT_TORR;
	CX__VAR_STRING_CTRL  sEXT_CH__ESC__RCP_He_EDGE_PRESSURE_SETPOINT_TORR;

	CX__VAR_STRING_CTRL  sEXT_CH__ESC__RCP_He_CENTER_FLOW_MAX_THRESHOLD;
	CX__VAR_STRING_CTRL  sEXT_CH__ESC__RCP_He_CENTER_FLOW_MIN_THRESHOLD;

	CX__VAR_STRING_CTRL  sEXT_CH__ESC__RCP_He_EDGE_FLOW_MAX_THRESHOLD;
	CX__VAR_STRING_CTRL  sEXT_CH__ESC__RCP_He_EDGE_FLOW_MIN_THRESHOLD;

	// FNC_PROC
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__PROC;
	CX__VAR_STRING_CTRL  sEXT_CH__EXCEPTION_ACT;
	CX__VAR_ANALOG_CTRL  aEXT_CH__STEP_CUR_NUM;
	CX__VAR_STRING_CTRL  sEXT_CH__LAST_STEP_FLAG;
	CX__VAR_STRING_CTRL  sEXT_CH__RCP_FILE_UPLOAD_FLAG;


	// LINK : IO CHANNEL ...
	CX__VAR_STRING_CTRL  sEXT_CH__APC_IO__CUR_VLV_POS;
	//


	//-------------------------------------------------------------------------
	// OBJ - MODE 

	// ...
	CString sMODE__INIT;
	int Call__INIT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	CString sMODE__RCP_DATA_INIT;
	int Call__RCP_DATA_INIT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	CString sMODE__READY;
	int Call__READY(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	CString sMODE__START;
	int Call__START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	CString sMODE__PROC;
	int Call__PROC(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	CString sMODE__PROC_SYSTEN_INIT;
	int Call__PROC_SYSTEM_INIT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int Fnc__PROC_SYSTEM_INIT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm,CString& err_msg);

	// ...
	int  Fnc__PROC(CII_OBJECT__VARIABLE* p_variable, CII_OBJECT__ALARM* p_alarm);	
	int  Fnc__PROC__CONTINUE_STEP(CII_OBJECT__VARIABLE* p_variable, CII_OBJECT__ALARM* p_alarm);	
	
	int  Init__PRE_RCP_ITEM();
	void Control__RECIPE_DELAY_PARAMETER(const double step_sec, const int set_req = -1);

	// ...
	int iDCOP__START_FLAG;

	int iHEADER_RCP_START;
	int iTEMP_STEP_RCP_START;

	int iPRC_FLAG;

	int iSTEP_CHANGE_FLAG;
	int iSTEP_COUNT;

	int iTOLERANCE_ABORT_FLAG;

	// ...
	CString sMODE__ABORT;
	int Call__ABORT(CII_OBJECT__VARIABLE *p_variable,CII_OBJECT__ALARM* p_alarm);
	int Fnc__ABORT(CII_OBJECT__VARIABLE* p_variable, CII_OBJECT__ALARM* p_alarm);

	// ...
	CString sMODE__END;
	int Call__END(CII_OBJECT__VARIABLE *p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	CString sMODE__STEP_DB_CHECK;
	int Call__STEP_DB_CHECK(CII_OBJECT__VARIABLE *p_variable,CII_OBJECT__ALARM* p_alarm);


	// ...
	void _Fnc_Mon__RCP_Matcher_Top__Ctrl_Req(CII_OBJECT__VARIABLE* p_variable, CII_OBJECT__ALARM* p_alarm);
	HANDLE hEVENT__RCP_MATCHER_CTRL;

	// ...
	void Mon__Wafer_Count_Ctrl(const int event_id, CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);


	// ...
	int Fnc__CHECK_PART_ERROR(CII_OBJECT__VARIABLE *p_variable,
							  CII_OBJECT__ALARM *p_alarm);

	int Fnc__INIT_PART_ERROR(CII_OBJECT__VARIABLE *p_variable,
							 CII_OBJECT__ALARM *p_alarm);

	int Fnc__CHECK_PART_STABLE(CII_OBJECT__VARIABLE *p_variable,
							   CII_OBJECT__ALARM *p_alarm);

	int Get__PART_UNSTABLE_MSG(CString& err_msg);

	// ...
	int Fnc__IO_INTERLOCK_CHECK(CII_OBJECT__VARIABLE *p_variable,
							    CII_OBJECT__ALARM *p_alarm);

	// ...
	void Alarm__POST_CHECK(CII_OBJECT__ALARM *p_alarm, CString msg, const int alarm_id);

	int Check__STEP_CONTROL();

	// ...
	void ALL_OBJ__WAIT(CII_OBJECT__VARIABLE *p_variable,const int mfc_check = 1);
	void ALL_OBJ__WAIT_SEC(CII_OBJECT__VARIABLE *p_variable,CII_OBJECT__ALARM *p_alarm);
	void ALL_OBJ__ABORTED_TO_AVAILABLE(CII_OBJECT__VARIABLE *p_variable);
	void ALL_MFC__ABORTED_TO_AVAILABLE(CII_OBJECT__VARIABLE *p_variable);

	void MFC_OBJ__WAIT(CII_OBJECT__VARIABLE *p_variable);

	int  ALL_OBJ__ABORT_WAIT(CII_OBJECT__VARIABLE *p_variable,
							 CII_OBJECT__ALARM *p_alarm,
						     CString& err_msg,
							 const int delay_flag = 1);

	// ...
	int Fnc__OBJ_Abort_Check(const CString& log_id,const int mfc_check = -1);
	
	int Fnc__OBJ_Avaliable_Check(const CString& log_id);
	int Fnc__Get_OBJ_Not_Available_List(CString& part_list);

	// MFCx OBJ - FNC .....
	int ANY_MFC_OBJ__Check_ABORTED();
	int ALL_MFC_OBJ__Check_AVAILABLE();
	
	int ALL_MFC_OBJ__Start_MODE(const CString& mode_name);
	int ALL_MFC_OBJ__Wait_MODE(const CString& log_id);
	int ALL_MFC_OBJ__Call_MODE(const CString& mode_name,const CString& log_id);
	int ALL_MFC_OBJ__Abort_Call_MODE(const CString& mode_name,const CString& log_id);

	// APC OBJ - FNC .....
	int APC_OBJ__Start_MODE(const CString& mode_name);
	int APC_OBJ__Wait_MODE(const CString& log_id);
	int APC_OBJ__Status_MODE(const CString& log_id);
	int APC_OBJ__Call_MODE(const CString& mode_name, const CString& log_id);
	int APC_OBJ__Abort_Call_MODE(const CString& mode_name, const CString& log_id);

	
	// RFx_GEN OBJ - FNC .....
	// BIAS
	int RF_GEN__BIAS_OBJ__Start_MODE(const CString& mode_name);
	int RF_GEN__BIAS_OBJ__Wait_MODE(const CString& log_id);
	int RF_GEN__BIAS_OBJ__Status_MODE(const CString& log_id);
	int RF_GEN__BIAS_OBJ__Call_MODE(const CString& mode_name,const CString& log_id);
	int RF_GEN__BIAS_OBJ__Abort_Call_MODE(const CString& mode_name,const CString& log_id);
	//

public:
	CObj__STEP_FNC();
	~CObj__STEP_FNC();

	//-------------------------------------------------------------------------
	int __DEFINE__CONTROL_MODE(obj,l_mode);
	int __DEFINE__VERSION_HISTORY(version);
	
	int __DEFINE__VARIABLE_STD(p_variable);
	int __DEFINE__ALARM(p_alarm);

	int __Define__USER_FUNCTION(CII_DEFINE__FUNCTION *p_fnc_ctrl);
	
	//-------------------------------------------------------------------------
	int __INITIALIZE__OBJECT(p_variable,p_ext_obj_create);
	
	//-------------------------------------------------------------------------
	int __CALL__CONTROL_MODE(mode,p_debug,p_variable,p_alarm);
	int __CALL__MONITORING(id,p_variable,p_alarm);
};
